// Receiver clock frequency  = 50MHz
// Baud Rate = 19200

module UART_Rx(Rx_out,Rx_in,Rx_clk);
  
  input Rx_in,Rx_clk;
  output [7:0]Rx_out;
  
  // Use Upper case for parameters
  parameter  N = 2604; //CLKS_PER_BIT
  
  // Defining states
  parameter IDLE = 2'b00;
  parameter START_BIT = 2'b01;
  parameter DATA_BURST = 2'b10;
  parameter STOP_BIT = 2'b11;
  
  reg [1:0]Rx_state = 0;
  reg [15:0]Rx_counter = 0;
  reg [7:0] Rx_Data = 0; // To store the incoming 8-bit data.
  reg [3:0]Rx_bit_index = 0;
//-----------------------------------------------------------------------  
// Double register approach to avoid metastability
  reg R1; 
  reg R2;
  
  always @(posedge Rx_clk) begin
    R1 <= Rx_in;
    R2 <= R1;
  end
//-----------------------------------------------------------------------  
  always @(posedge Rx_clk) begin
    
    case(Rx_state)
    IDLE : begin 
      Rx_counter = 0;
      Rx_bit_index = 0;
      Rx_Data = 0;
      
      if (R2 == 1'b0)  // start bit received
       Rx_state <= START_BIT;
      else
       Rx_state <= IDLE;
    end
   
    START_BIT : begin
      if (Rx_counter == (N-1)/2) begin
        
        if (R2 == 1'b0)  // making sure that start bit 0 is received.
          begin
          Rx_state <= DATA_BURST;
          Rx_counter <= 0; 
          end
        
        else
          Rx_state <= IDLE;
      end
        
      else begin
        Rx_counter <= Rx_counter+1; // 2 independent events can run parallaly
        Rx_state <= START_BIT;
      end
      
      end //START_BIT
        
    DATA_BURST : begin
      
      if( Rx_counter == N-1) // 3N/2,5N/2,7N/2.. 
        begin 
          Rx_counter <= 0;
          Rx_Data[Rx_bit_index] <= R2;
          if (Rx_bit_index < 8 )
            begin              // Check if all 8 bits are received
              Rx_bit_index <= Rx_bit_index + 1;
              Rx_state<=  DATA_BURST;
            end
          
          else 
            begin  // All bits clk
              Rx_bit_index <= 0;
              Rx_state <=  STOP_BIT; 
            end
       end
      
       else begin
        Rx_counter <= Rx_counter+1;
        Rx_state <= DATA_BURST;
      end 
        
      end //DATA_BURST
      
      
    STOP_BIT : begin
      if (Rx_counter == N) begin
        Rx_counter <= 0;
        Rx_state <= IDLE;
      end
        
      else begin
        Rx_counter <= Rx_counter + 1;
        Rx_state <= STOP_BIT;
      end
      
      end //STOP_BIT
    
  endcase
  end
    assign Rx_out = Rx_Data;
endmodule
