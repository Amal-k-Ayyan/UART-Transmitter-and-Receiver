module UART_Tx(Tx_out,Tx_data,Tx_clk,Tx_En);
  
  input [7:0]Tx_data;
  input Tx_clk,Tx_En;
  output Tx_out;
  
  // Use Upper case for parameters
  parameter  N = 2604; //CLKS_PER_BIT
  
  // Defining states
  parameter IDLE = 2'b00;
  parameter START_BIT = 2'b01;
  parameter DATA_BURST = 2'b10;
  parameter STOP_BIT = 2'b11;
  
  reg [1:0]Tx_state = 0;
  reg [15:0]Tx_counter = 0;
  reg [7:0] Tx_Data = 0; // To store the incoming 8-bit data.
  reg [3:0]Tx_bit_index = 0;
//-----------------------------------------------------------------------  
// Double register approach to avoid metastability
  reg R1; 
  reg R2;
  
  always @(posedge Rx_clk) begin
    R1 <= Tx_in;
    R2 <= R1;
  end
//-----------------------------------------------------------------------  
  always @(posedge Tx_clk) begin
    
    case(Tx_state)
    IDLE : begin 
      Tx_counter = 0;
      Tx_bit_index = 0;
      Tx_Data = 0;
      
      if (Tx_En == 1'b0)  // start bit received
       Tx_state <= START_BIT;
      else
       Tx_state <= IDLE;
    end
   
    START_BIT : begin
      Tx_out <= 0; // start bit 0
      if (Tx_counter< N-1) begin 
        Tx_counter <= Tx_counter+1;
        Tx_state <= START_BIT;
      end
        
      else begin
        Tx_state <= DATA_BURST;
        Tx_counter <= 0; 
      end
      
      end //START_BIT
        
    DATA_BURST : begin
      
      Tx_out <= Tx_Data[Tx_bit_index];
      if( Tx_counter< N-1) // 3N/2,5N/2,7N/2.. 
        begin 
          Tx_counter <= Tx_counter+1;
          Tx_state<=  DATA_BURST;
        end
          
       else 
         begin
           Tx_counter <= 0;
           if (Rx_bit_index < 8 )
             begin              // Check if all 8 bits are received
               Tx_bit_index <= Tx_bit_index + 1;
               Tx_state <= DATA_BURST;
             end
           else 
             begin  // All bits sent
              Tx_bit_index <= 0;
              Tx_state <= STOP_BIT;
             end
         end
        
     end //DATA_BURST
      
      
    STOP_BIT : begin
      Tx_out <= 1; // stop bit 1
      if (Tx_counter< N-1) begin
        Tx_counter <= Rx_counter + 1;
        Tx_state <= STOP_BIT;
      end
        
      else begin
        Tx_counter <= 0;
        Tx_state <= IDLE;
      end
      
      end //STOP_BIT
    
  endcase
  end
endmodule
